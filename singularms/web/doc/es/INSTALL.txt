****************************************************************
********************* GUIA DE INSTALACIÓN **********************
****************************************************************
* Autor: Juan Carlos Castillo Cano <juancarlos@galotecnia.com> *
* Galotecnia, R.S.S. <info@galotecnia.com>                     *
****************************************************************

INTRODUCCIÓN

SingularMS está compuesto de dos módulos (ambos necesarios para la completa funcionalidad, si bien la aplicación web es independiente). 

* WEB

    Aplicación web de usuario, desarrollada en Django (Python 2.5) con las siguientes dependencias:

    * Django 1.1 o posterior.
    * Soaplib 0.7.0 (no testeado con versiones posteriores).
    * Simplejson 1.7.3 o posterior.
    * SOAPpy 0.11.5 o posterior | Suds 0.3.9 o posterior.

  - PRIMEROS PASOS

    1. Creación de usuarios

        Para comenzar, se ha de crear al menos un usuario proveedor (normalmente el administrador), al que irán asociados los distintos accesos existentes en la plataforma. Una vez tengamos al menos un proveedor, podremos crear tantos clientes como se necesite, especificando el nombre de usuario y su contraseña, así como la posibilidad de que dicho usuario gestione canales, es decir, pueda gestionar canales y los subscriptores de los mismos. Estos clientes podrán hacer uso de la plataforma de forma segura, con las funcionalidades de envío y consulta de mensajes enviados (y la gestión de canales si tiene privilegios para ello) así como un servicio de agenda integrado con el envío de mensajes.

    2. Creación de accesos, cuentas y compras

        Una vez tengamos a nuestros clientes agregados a la plataforma, el siguiente paso es configurar los distintos accesos que pueden hacer uso y el saldo disponible para cada uno de ellos. Para crear un acceso vea el apartado accesos, y seguidamente cree al menos una cuenta para cada cliente siguiendo el apartado cuentas, para finalmente configurarle un saldo inicial siguiendo el apartado compras. 

    3. Configurar el demonio

        Véase cómo configurar el demonio para más información.

    4. Gestión de canales

        Para poder gestionar canales el usuario ha de tener como mínimo permisos para gestionar canales. Las funcionalidades implementadas y su funcionamiento son las siguientes:

        * Lista de canales: se muestran tanto los canales asociados al cliente como las funcionalidades de crear, modificar o borrar un canal.
        * Subscriptores: para cada canal se muestran los subscriptores asociados, así como la posibilidad de añadirlos o eliminarlos.

    5. Enviar mensajes

        Para el envío de mensaje la aplicación tiene habilitados cuatro formularios, que por orden de complejidad son:

        * Sencillo: Sólo se requiere los números de teléfono a los cuales se enviará el mensaje y el tipo de mensaje a enviar.
        * Canal sencillo: Sólo se requiere el canal y el tipo de mensaje que se enviará a todos los subscriptores actuales de dicho canal.
        * Canal avanzado: Permite programar el día y la hora de envío, así como la fecha de caducidad del mensaje. Se requiere el canal, la cuenta de la que se descontará el crédito y el tipo de mensaje a enviar.
        * Avanzado: Permite programar el día y la hora de envío, así como la fecha de caducidad del mensaje. Se require los números de teléfono a los que se enviará el mensaje, la cuenta de la que se descontará el crédito y el tipo de mensaje a enviar.

        Existe una vista con la lista de mensajes enviados tanto a canal como a números individuales, así como filtros sobre esta lista para seleccionar aquellos mensajes que necesite consultar. Además, por cada entrada en la lista de mensajes se muestra información como el estado del mensaje (se actualiza periodicamente), mensajes de error, fecha de envío, etc.

    6. Recibir mensajes

        Se pueden recibir dos tipos de mensajes:

        * Respuesta: mensaje recibido como respuesta a un mensaje enviado por la plataforma. Estos mensajes aparecen justo debajo del mensaje inicial en la lista de mensajes enviados, con un formato de conversación (primero el mensaje enviado seguido de las sucesivas respuestas recibidas).
        * Básicos: mensaje recibido explícitamente, solicitando algún tipo de servicio (alta, info o baja de un canal, servicio externo, notificaciones, etc) o como canal de información (encuestas, mensajes para mostrar en televisión, etc). Estos mensajes aparecen en la opción del menú de mensajes entrantes, y son sólo accesibles por el administrador. Para saber más como configurar los servicios relacionados con la recepción de mensajes consulte comandos de servicios.

    7. Agenda

        Como funcionalidad extra la aplicación facilita una gestión sencilla de sus contactos mediante una agenda integrada con el envío de mensajes a sus contactos. Además, puede importar y exportar sus datos de otras libretas de direcciones (por ejemplo, Outlook o Thunderbird). Consulte la sección de configuración de la agenda para más información. 

  - CONFIGURACIÓN

    1. Accesos

        APIs existentes en el DAEMON para enviar y recibir mensajes, así como consultar el estado de los mismos, etc. Para agregar un nuevo acceso hay que implementarlo como conector del DAEMON y añadirlo al fichero web/apps/accounting/models.py. 

        """
        # Lista de conectores
        DUMMY = 0
        ...
        ...
        SMSTOOLS = 3
        ...
        SINGULAR = 5
       
        BACKEND_LIST = (
            (DUMMY, 'Dummy'),
        ...
        ...
            (SMSTOOLS, 'SmsTools'),
        ...
            (SINGULAR, 'Singular'),
        )
        """

        La lista de conectores actual con sus argumentos posibles es la siguiente:

        * Dummy
        * SMSTools
        * SingularMS
          · username: nombre del usuario de la cuenta en el SingularMS remoto.
          · password: contraseña del usuario de la cuenta en el SingularMS remoto.
          · account: cuenta del usuario en el SingularMS remoto.
          · process: boolenao para indicar si se deben procesar los mensajes entrantes o no (creación de mensajes de respuesta automáticos).
          · url: (opcional) url del documento WSDL asociado al SingularMS remoto.

    2. Cuentas

        Las cuentas son distintas configuraciones para un mismo acceso asociadas a un usuario, de forma que varios usuarios puedan hacer uso de la misma plataforma de forma independiente. Dependiendo del acceso al que esté asociado, las cuentas cuentan con una serie de argumentos:

        * Dummy
          · de: dirección de correo remitente de los mensajes de prueba.
          · para: dirección de correo destinataria de los mensajes de prueba.
    
        * SMSTools
          · out_dir: directorio donde se guardarán los mensajes salientes.
          · in_dir: directorio donde se recibirán los mensajes entrantes.
        * SingularMS

    3. Compras

        Las compras están asociadas a las cuentas, y cumplen la funcionalidad de gestionar los incrementos y saldos actuales de las mismas. Cada compra tiene asociada una cantidad inicial (cada unidad se corresponde con un mensaje de texto, por lo que el saldo indica el número de mensajes que pueden ser enviados con la cuenta asociada) y unas fechas de inicio y caducidad. Las compras son acumulativas, es decir, el saldo total de una cuenta se contabiliza como la suma de todas sus compras asociadas.

    4. Idiomas

        La aplicación viene por defecto en inglés. Para conseguir los mensajes traducidos a otro idioma se han de realizar los siguientes pasos (el directorio en el que se ejecutarán las siguientes instrucciones es SingularMS/web/):

        1. Ejecute la instrucción python manage.py makemessages -l IDIOMA (más ayuda en python manage.py makemessages –help).
        2. Se creará un fichero en locale/IDIOMA/LC_MESSAGES/django.po en el cual están todos los mensajes de la aplicación y sus traducciones realizadas por el módulo de traducción de Django. Modifique dicho fichero de la siguiente forma (ver código inferior):
            I. Cadenas vacías ””: escriba la traducción del texto inmediatamente superior entre dichas comillas.
            II. Sentencias ”#, fuzzy”: traducciones realizadas automáticamente por el módulo de traducción de Django. Importarte revisarlas todas.
        3. Una vez realizada la traducción de todos los mensajes, ejecute python manage.py compilemessages -l IDIOMA y cambie el idioma por defecto de su navegador por el que acaba de traducir.
        4. Reinicie la interfaz web; una vez recargada, se le mostrará la interfaz en el idioma por defecto.

        """
        #: settings.py:148
        msgid "Command not found on system"
        msgstr "" # Aquí debe escribir la traducción del texto "Command not found on system"
 
        #: settings.py:152
        #, fuzzy
        msgid "Statistics"
        msgstr "Estadísticas" # Traducción realizada por django, importante revisarla
        """

        NOTA: todos los mensajes están traducidos al castellano en el fichero web/locale/es/LC_MESSAGES/django.po, por lo que si quiere traducir la aplicación al castellano vaya directamente al paso 3

    5. Comandos de servicio

        Para procesar los mensajes entrantes existen tres tipos de comandos básicos en la aplicación, para crear un comando de cada tipo utilice los asistentes de comandos (o si prefiere más detalle de los comandos cree primero un comando base seguidamente del comando que más se ajuste al servicio que desea ofrecer). Se puede procesar un mensaje entrante por el texto del mismo, el número al que se recibe o una mezcla de ambos, además de ir asociados a una cuenta para que se puedan crear mensajes de respuesta. Los tipos de comandos son:

        * Administrativo: proceso de alta, modificación, obtención de información o baja de un canal. Ejemplo ALTA DEPORTES Javier → Ha sido dado de alta como Javier en el canal de deportes …
        * Respuesta: mensajes entrantes que requieren una respuesta básica. Ejemplo VOTO RAUL → Su voto ha sido contabilizado
        * Servicio externo: mensajes para los que la respuesta viene dada por la ejecución o consulta de un servicio web externo a la aplicación, como puede ser consultar el horario de una entidad u obtener un número de telefóno. Ejemplo FARMACIA GUARDIA → se invoca al servicio web del ayunamiento que determina que farmacia de guardia actual y su localización → Farmacia Lourdes - C/ Gran Via, 27

    6. Tipos de mensaje

        Por defecto, la aplicación viene con 4 tipos de mensajes:

        * SMS: mensaje de texto estándar, limitado a 160 caracteres del abecedario latino (y mayoría de símbolos básicos).
        * MMS: mensaje de texto con contenido multimedia, limitado según la plataforma y la red de telefonía del receptor.
        * Certificado: mensaje de texto certificado (no soportado por ningún conector actualmente).
        * Repliable: engloba a todos los mensajes entrantes (recibidos, de respuesta, etc).

    7. Agenda

        Puede importar y exportar los datos de sus contactos utilizando la funcionalidad de importar/exportar para los formatos estándares VCARD2.1 y VCARD3, así como un formato no estándar separado por tabuladores CVS. Para agregar nuevos formatos de importación y exportación a la aplicación debe implementar un parser para el nuevo formato y agregarlo en la ruta /web/apps/addressbook/parsers (vea los parsers existentes para obtener una idea de cómo implementarlo). Además ha de incluir el nuevo parser en el fichero constants.py del directorio /web/apps/addressbook.

        """
        96 OPCIONES_IMPORTACION = (
        97     (VCARD21, _(u'vCARD2.1')),
        98     (VCARD3, _(u'vCARD3')),
        99     (CSV, _(u'CSV')),
        100     # Nuevos parsers
        101 )
        102
        103 TIPOS_RESPUESTA = {
        104     VCARD21: 'text/x-vcard',
        105     VCARD3 : 'text/x-vcard',
        106     CSV    : 'text/csv',
        107     # Nuevos parsers
        108 }
        """

        y en el fichero /web/apps/addressbook/parsers/_init_.py

        """
        # -*- coding=utf-8 -*-
        from vcard21 import vcard21
        from vcard3 import vcard3
        from csv import csv
        # Nuevos parsers
        """

    8. Configuración Avanzada

        Fichero web/email_suport.py

        Configurar las variables de (correo remitente) y para (lista de destinatarios) para el envío de correo en caso de excepción en la aplicación:
        
        """
        9     para = ['admin@galotecnia.com', 'email2@email.com']
        10     de = 'no-reply@galotecnia.com'
        """

        Fichero web/settings.py

        Variables que deberán ser modificadas en función de las características de su instalación. El resto de variables existentes en el fichero se corresponden con variables de Django, si tiene alguna duda consulte la configuración de Django.

        """
        110 # Send mail on app exception
        111 SEND_MAIL_ON_EXCEPTION = True
        112
        113 # Sender email for all app emails
        114 FROM_EMAIL_ADDRESS = 'singularms-noreply@galotecnia.com'
        115
        116 # Send mail on bad incoming message
        117 WRONG_INCOMMING_MESSAGE_EMAIL = 'desarrollo@galotecnia.com'
        118
        119 # Maximun MMS size in KB
        120 MMS_SIZE = 300
        121
        122 # Enable the upload of multiple files in the MMS send form
        123 MMS_MULTI = True
        124
        125 # Extension list of allowed file types for MMS
        126 MMS_FILE_TYPES = ['gif', 'jpg', 'jpeg', 'jpe', 'jfif', 'jfi', 'jif', 'mid', 'midi', \
        127                   'amr', 'mpeg', '3gpp', 'jad', 'java', 'jar', 'sis', 'rm',]
        128
        129 # Maximun SMS size in characters
        130 SMS_SIZE = 160
        131
        132 # Maximum wait time in seconds for a semaphore
        133 MAX_SEMAPHORE_WAIT = 5.0
        134
        135 # paginate in subscriber
        136 SUBSCRIBER_PAGINATE = 10
        137
        138 # Seconds to resend a message (tmp status)
        139 DEFAULT_DEACTIVATION_TIME = 300
        140
        141 # Days to allow check server status
        142 DEFAULT_CHECK_DAYS = 4
        143
        144 # Secs. to resend in case of connector temp fail
        145 DEFAULT_RETRY_TIME_CONNECTOR_TEMP_FAIL = 300
        146
        147 # Log messages to syslog
        148 LOG_TO_SYSLOG = True
        149
        150 # Credit limits. If any account reach those limits, an email will be sent to EMAIL_CREDIT_LIMIT
        151 MINIMAL_CREDIT_LIMIT = 100
        152 CRITICAL_CREDIT_LIMIT = 10
        153 EMAIL_CREDIT_LIMIT = ['desarrollo@galotecnia.com']
        154
        155 # Log settings
        156 LOG_FILENAME = '/var/log/singularms.log'
        157 LOG_FORMAT = "%(asctime)-15s [%(levelname)s] %(filename)s:%(lineno)s %(message)s"
        158
        159 # Activate addressbook application
        160 ACTIVE_ADDRESS_BOOK = True
        161
        162 # Use SOAPpy client o SUDS client
        163 USE_SOAPPY_CLIENT = True
        """ 


        
 * DAEMON

    Daemon para el envío, recepción y chequeo de estado de los mensajes de la aplicación web. Basado en una serie de conectores o APIs para poder entenderse con las distintas empresas que proporcionan servicio de mensajería SMS y MMS. Dependencias:

    * SOAPpy 0.11.5 o superior (conectores)
    * SingularMS 0.1.1 o superior (modelo de datos)

    Parámetros: 

    Usage: singularmsd.py [options]
 
    Options:
      --version             show program's version number and exit
      -h, --help            show this help message and exit
      -d, --daemon          Launch registerd in daemon mode
      -v, --verbose         Turn on verbose mode
      -p PIDFILE, --pid-file=PIDFILE Pid file
      -l LOGFILE, --log-file=LOGFILE Absolute path to log file


    Por defecto –daemon y –verbose están seteados a false, –pid-file a /var/run/singularmsd.pid  y el fichero de log –log-file a /var/log/singularmsd.log. Además, existe un script auxiliar singularmsd que carga las variables de entorno correctas para la ejecución del DAEMON. 

    """
    #!/bin/sh
    . /opt/pinax-env/bin/activate
    WD=$(pwd)
    export PYTHONPATH=$WD/../web:$WD/../web/apps
    export DJANGO_SETTINGS_MODULE=settings
    python singularmsd.py $* -p tmp.pid -l singularmsd.log
    """

    Para iniciar el demonio puede hacerlo de dos formas, usando la opción -d  ”./singularmsd -d [-v-p-l]“ o sin usar la opción -d  ”./singularmsd [start|restart|stop] [-v-p-l]“. 

    1. Crear un conector

        Heredar de la clase Connector definida en daemon/connectors/base.py. Sobreescribir aquellos métodos que vayan a ser utilizados en el conector (por ejemplo, si sólo va a recibir mensajes no harían falta los métodos sent_one, send_many, send_mms, etc) y cualquier argumento extra se ha de especificar en accesos o en cuentas. Para añadir el nuevo conector a la aplicación se ha de crear una entrada en la lista de conectores del demonio en daemon/singularmsd.py (línea 40).

        """
        40 backends = {
        41     0: DummyConnector,
        ...
        ...
        44     3: SmsToolConnector,
        ...
        46     5: SingularConnector,
        47 }
        """

        así como en la aplicación web.

        """
        class Connector:
            # STATUS
            SENT = SENT_STATUS
            FAILED = FAIL_STATUS
            PROCESSING = PROCESSING_STATUS
            NONE = NONE_STATUS
 
            def __init__(self, args):
                "Nuestros parametros de configuracion vienen por un diccionario en args"
                self.log = logging.getLogger('singularmsd')
 
            def send_one(self, text, recipient, args):
                "Envia un sms a un numero de telefono por el conector"
                raise NotImplemented
                # Returns [STATUS, STATUS_MSG, ID_REMOTO]
 
            def send_many(self, text, recipients, args):
                "Envia N sms's a una lista de números por el conector"
                raise NotImplemented
                # Returns [STATUS, STATUS_MSG, ID_REMOTO]
 
            def get_info(self, id):
                "Obtiene el estado en la plataforma del mensaje para actualizarlo en local"
                raise NotImplemented
                # Returns [[STATUS, STATUS_MSG], ...]
 
            def get_credit(self):
                "Obtiene el crédito disponible en la plataforma"
                raise NotImplemented
                # Return FLOAT_CREDIT
 
            def send_mms(self, text, recipient, attachments, args):
                "Envia un mms a un numero de telefono por el conector"
                raise NotImplemented
                # Return [STATUS, STATUS_MSG, ID_REMOTO]
 
            def check_code(self, code):
                "Recodifica el estado devuelvo por el conector para que sea entendible por el demonio"
                raise NotImplemented
                # Return STATUS
 
            def encode(self, incoming_msg, **kwargs):
                """
                    Funcion para parsear un menjase entrante y ver si casa con algun comando, generando
                    un mensaje de respuesta
                """
                raise NotImplemented
                # No return
 
            def decode(self, access, **kwargs):
                """
                    Funcion encargada de recibir los mensajes entrates, se le
                    pasa por argumento la cuenta para el cual se quieren descargar
                    los mensajes nuevos. Si los mensajes han de ser procesados (servicios
                    de canal, servicio web, etc, se ha de llamar a self.encode(incoming_msg, kwargs)
                """
                raise NotImplemented
                # No return
        """



