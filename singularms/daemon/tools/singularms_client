#!/usr/bin/python
# -*- encoding: utf-8 -*-

#######################################################################
#  SingularMS version 1.0                                             #
#######################################################################
#  This file is a part of SingularMS.                                 #
#                                                                     #
#  SingularMs is free software; you can copy, modify, and distribute  #
#  it under the terms of the GNU Affero General Public License        #
#  Version 1.0, 21 May 2007.                                          #
#                                                                     #
#  SingularMS is distributed in the hope that it will be useful, but  #
#  WITHOUT ANY WARRANTY; without even the implied warranty of         #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               #
#  See the GNU Affero General Public License for more details.        #
#                                                                     #
#  You should have received a copy of the GNU Affero General Public   #
#  License with this program; if not, contact Galotecnia              #
#  at contacto[AT]galotecnia[DOT]org. If you have questions about the #
#  GNU Affero General Public License see "Frequently Asked Questions" #
#  at http://www.gnu.org/licenses/gpl-faq.html                        #
#######################################################################

import SOAPpy
import socket
import datetime
import time
import getopt
import sys
import getpass
from gettext import gettext as _
from gettext import textdomain



def send_message_to_channel (server, username, password, account, channel, text):
    print _("Sending message to channel: '%(channel)s'") % {'channel': channel}
    try:
        date = datetime.datetime.now()
        text = _("%(text)s (%(date)s)") % {'text': text, 'date': date.strftime("%H:%M %d/%m/%y")}
        id = server.sendSMSToChannel(username, password, account, channel, text)
        print _("Message id: %(id)s") % {'id': id}
    except TypeError, e:
        #print "No tiene acceso con el usuario: %s y el password suministrado" % usuario
        print _("You don't have access with user %(username) and password") % {'username': username}
    except socket.error, (e, s):
        print _("Error# %(codeError)d creating socket: '%(text)s'") % {'codeError': e, 'text': s}

def send_message (server, username, password, account, mobile, text):
    try:
        date = datetime.datetime.now()
        text = _("%(text)s (%(date)s)") % {'text': text, 'date': date.strftime("%H:%M %d/%m/%y")}
        id = server.sendSMS(username, password, account, mobile, text)
        print _("Message id: %(id)s") % {'id': id}
#            status = server.getStatus (usuario, contrasena, id)
#            print "Estado de %s: '%s'" % (id, status[1])
    except TypeError, e:
        print _("You don't have access with user %(username) and password") % {'username': username}
    except socket.error, (e, s):
        print _("Error# %(codeError)d creating socket: '%(text)s'") % {'codeError': e, 'text': s}

def receive_message (server, username, password, access, mobile, text):
    try:
        date = datetime.datetime.now()
        text = _("%(text)s (%(date)s)") % {'text': text, 'date': date.strftime("%H:%M %d/%m/%y")}
        if not server.receiveSMS(username, password, mobile, text, date, access):
            print _("Error: access %(access)s does not exist") % {'access': access}
    except TypeError, e:
        print _("You don't have access with user %(username) and password") % {'username': username}
    except socket.error, (e, s):
        print _("Error# %(codeError)d creating socket: '%(text)s'") % {'codeError': e, 'text': s}

def print_account_list (server, username, password):
    accounts = server.getAccounts (username, password)
    print _("Account list for user %(username)s") % {'username': username}
    try:
        for account in accounts:
            credit = server.getCredit(username, password, account)
            print _(" - '%(account)s', credit: %(credit)d") % {'account': account, 'credit': credit}
    except TypeError:
        print _("Wrong username or password")

def print_channel_list (server, username, password):
    channels = server.getChannels (username, password)
    print _("Channel list for user %(username)s") % {'username': username}
    try:
        for channel in channels:
            print _(" - '%(channel)s'") % {'channel': channel}
    except TypeError:
        print _("Wrong username or password")


def print_account_credit (server, username, password):
    print _("Credit for account %(account)s") %  {'account': account}
    credit = server.getCredit(username, password, account)
    if credit == -200:
        print _("ERROR: Wrong account")
    else:
        print _(" - credit: %(credit)d") % (credit)

def usage():
    usage = _("""
Usage: %(arg0)s [options]
  -s, --server_url
  -u, --username
  -p, --password
  -a, --account  (account or access)
  -A, --list-accounts
  -p, --get-credit
  -c, --channel
  -C, --list-channels
  -m, --mobile
  -t, --text
  -S, --send
  -R, --receive
""") % {'arg0': sys.argv[0]}
    print usage

def main():
    textdomain('daemon_tools')
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hu:p:a:m:s:c:t:APCSR",
            [
                "help", "username", "password", "account", "mobile", "server_url",
                "text", 'list-accounts', 'get-credit', 'list-channels', 'send', 'receive',
            ])
    except getopt.GetoptError, err:
        print err
        usage()
        sys.exit(2)
    username = password = account = mobile = text = channel = ''
    list_accounts = get_credit = list_channels = False
    send = receive = False
    server_url = 'http://localhost:8080/'
    for option, value in opts:
        if option in ("-h", "--help"):
            usage()
            sys.exit()
        elif option in ("-s", "--server_url"):
            server_url = value
        elif option in ("-u", "--username"):
            username = value
        elif option in ("-p", "--password"):
            password = value
        elif option in ("-m", "--mobile"):
            mobile = value
        elif option in ("-a", "--account"):
            account = value
        elif option in ("-t", "--text"):
            text = value
        elif option in ("-c", "--channel"):
            channel = value
        elif option in ("-A", "--list-accounts"):
            list_accounts = True
        elif option in ("-P", "--get-credit"):
            get_credit = True
        elif option in ("-C", "--list-channels"):
            list_channels = True
        elif option in ("-S", "--send"):
            if receive:
                print _("Error: Conflicting options -R and -S")
                sys.exit (5)
            send = True
        elif option in ("-R", "--receive"):
            if send:
                print _("Error: Conflicting options -R and -S")
                sys.exit (5)
            receive = True

    if (username == ''):
        usage ()
        sys.exit(1)
    if (password == ''):
        password = getpass.getpass()

    server = SOAPpy.SOAPProxy(server_url)
    try:
        if list_accounts:
            print_account_list (server, username, password)
            exit (0)
        if list_channels:
            print_channel_list (server, username, password)
            sys.exit (0)
        if (account == ''):
            usage ()
            sys.exit(1)
        if get_credit:
            print_account_credit (server, username, password, account)
            sys.exit (0)
        if text == '':
            for line in sys.stdin:
                text += line.strip()
        if text == '':
            usage ()
            sys.exit(2)
        if not send and not receive:
            print _("What do you want to do, send or receive a message?. Please use -S or -R")
            sys.exit (0)
        if channel != '' and send:
            send_message_to_channel (server, username, password, account, channel, text)
        if mobile != '':
            if send:
                send_message (server, username, password, account, mobile, text)
            else:
                access = account
                receive_message (server, username, password, access, mobile, text)
    except socket.error, e:
        error = eval (e.__str__())
        print _("Error connecting to %(serverUrl)s: %(error)s") % {'serverUrl': server_url, 'error': error[1]}
        sys.exit (1)

if __name__ == "__main__":
    main()
